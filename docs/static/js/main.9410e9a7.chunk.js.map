{"version":3,"sources":["assets/logo.png","components/pages/Contacto/Contacto.tsx","components/pages/Contacto/index.tsx","components/pages/Inicio/index.tsx","components/pages/Inicio/Inicio.tsx","components/pages/Faq/Faq.tsx","components/pages/Faq/index.tsx","components/pages/Amigos/Amigos.tsx","components/pages/Amigos/index.tsx","Routes/index.tsx","config/NavItems.tsx","constants/colors.tsx","components/common/Header/index.tsx","components/common/Header/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledContacto","styled","div","Contacto","Inicio","StyledFaq","Faq","StyledAmigos","Amigos","Routes","path","exact","IconStyles","color","config","Home","Group","MailOption","CircleQuestion","Header","background","pad","align","Box","direction","gap","Anchor","href","src","logo","alt","Nav","map","item","index","to","key","as","label","title","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,wLCGrCC,EAAiBC,UAAOC,IAAV,+EAAGD,CAAH,sBCDLE,EDKE,kBACf,kBAACH,EAAD,uBENaI,ECAA,kBACb,8CCAIC,EAAYJ,UAAOC,IAAV,qEAAGD,CAAH,sBCDAK,EDKH,kBACV,kBAACD,EAAD,kBELIE,EAAeN,UAAOC,IAAV,0EAAGD,CAAH,sBCDHO,EDKA,kBACb,kBAACD,EAAD,qBEgBaE,EAjBA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,QACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,IAAIC,OAAO,GACrB,kBAAC,EAAD,S,gECfAC,EAAa,CACjBC,MCDoB,WD2BPC,EAvBA,CACb,CACE,KAAQ,UACR,MAAS,SACT,KAAQ,kBAACC,EAAA,EAASH,IAEpB,CACE,KAAQ,UACR,MAAS,SACT,KAAQ,kBAACI,EAAA,EAAUJ,IAErB,CACE,KAAQ,YACR,MAAS,WACT,KAAQ,kBAACK,EAAA,EAAeL,IAE1B,CACE,KAAQ,OACR,MAAS,QACT,KAAQ,kBAACM,EAAA,EAAmBN,K,iBEzBjBO,ECUA,kBACX,kBAAC,IAAD,CAASC,WAAW,SAASC,IAAI,SAASC,MAAM,YAC9C,kBAACC,EAAA,EAAD,CAAKC,UAAU,MAAMF,MAAM,SAASG,IAAI,SACtC,kBAACC,EAAA,EAAD,CAAQC,KAAK,KACX,yBAAKC,IAAKC,IAAMC,IAAI,qBAGxB,kBAACC,EAAA,EAAD,CAAKP,UAAU,OACZV,EAAOkB,KAAI,SAACC,EAAMC,GAAP,OACV,kBAAC,IAAD,CAAMC,GAAIF,EAAKvB,KAAM0B,IAAKF,GACxB,kBAACR,EAAA,EAAD,CACEW,GAAG,OACHxB,MFpBQ,UEqBRyB,MAAOL,EAAKM,MACZH,IAAKH,EAAKM,MACVC,KAAMP,EAAKO,c,MCZVC,MATf,WACE,OACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9410e9a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e26e6631.png\";","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst StyledContacto = styled.div`\n  background: #F00;\n`;\n\nconst Contacto = () => (\n  <StyledContacto>Contacto page</StyledContacto>\n);\n\nexport default Contacto;","import Contacto from './Contacto';\n\nexport default Contacto;","import Inicio from './Inicio';\n\nexport default Inicio;","import React from 'react';\n\nconst Inicio = () => (\n  <div>Inicios page</div>\n);\n\nexport default Inicio;","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst StyledFaq = styled.div`\n  background: #F00;\n`;\n\nconst Faq = () => (\n  <StyledFaq>Faq page</StyledFaq>\n);\n\nexport default Faq;","import Faq from './Faq';\n\nexport default Faq;","import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst StyledAmigos = styled.div`\n  background: #F00;\n`;\n\nconst Amigos = () => (\n  <StyledAmigos>Amigos page</StyledAmigos>\n);\n\nexport default Amigos;","import Amigos from './Amigos';\n\nexport default Amigos;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Contacto from '../components/pages/Contacto';\nimport Inicio from '../components/pages/Inicio';\nimport Faq from '../components/pages/Faq';\nimport Amigos from '../components/pages/Amigos';\n\nconst Routes = () => (\n  <Switch>\n    <Route path=\"/amigos\">\n      <Amigos />\n    </Route>\n    <Route path=\"/faq\">\n      <Faq />\n    </Route>\n    <Route path=\"/contacto\">\n      <Contacto />\n    </Route>\n    <Route path=\"/\" exact={true}>\n      <Inicio />\n    </Route>\n  </Switch>\n);\n\nexport default Routes;","import React from 'react';\nimport { Home, Group, MailOption, CircleQuestion } from 'grommet-icons';\nimport { PRIMARY } from '../constants/colors';\n\nconst IconStyles = {\n  color: PRIMARY,\n}\n\nconst config = [\n  {\n    \"path\": \"/inicio\",\n    \"title\": \"Inicio\",\n    \"icon\": <Home {...IconStyles} />\n  },\n  {\n    \"path\": \"/amigos\",\n    \"title\": \"Amigos\",\n    \"icon\": <Group {...IconStyles} />\n  },\n  {\n    \"path\": \"/contacto\",\n    \"title\": \"Contacto\",\n    \"icon\": <MailOption {...IconStyles} />\n  },\n  {\n    \"path\": \"/faq\",\n    \"title\": \"Ayuda\",\n    \"icon\": <CircleQuestion {...IconStyles} />\n  }\n]\n\nexport default config;","export const BLACK = '#000000';\nexport const DARK_GRAY = '#333333';\nexport const WHITE = '#FFFFFF';\nexport const LIGHT_GRAY = '#cccccc';\nexport const ORANGE = '#f09a0d';\nexport const LIGHT_ORANGE = '#FAC200';\nexport const TURQUOISE = '#019be3';\nexport const LIGHT_TURQUOISE = '#19B5FE';\n\n\nexport const PRIMARY = ORANGE;","import Header from './Header';\n\nexport default Header;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header as GHeader, Box, Anchor, Nav } from 'grommet';\nimport config from '../../../config/NavItems';\nimport logo from '../../../assets/logo.png';\nimport { PRIMARY } from '../../../constants/colors';\n\ntype Item = {\n    path: String;\n    title: String;\n    icon: String;\n}\nconst Header = () => (\n    <GHeader background=\"dark-1\" pad=\"medium\" align=\"baseline\">\n      <Box direction=\"row\" align=\"center\" gap=\"small\">\n        <Anchor href=\"/\">\n          <img src={logo} alt=\"Accion Digital\" />\n        </Anchor>\n      </Box>\n      <Nav direction=\"row\">\n        {config.map((item, index) => (\n          <Link to={item.path} key={index}>\n            <Anchor\n              as=\"span\"\n              color={PRIMARY} \n              label={item.title}\n              key={item.title}\n              icon={item.icon}\n            />\n          </Link>\n        ))}\n      </Nav>\n    </GHeader>\n  // <header className=\"header\" id=\"header\">\n  //   <Link className=\"logo\" to=\"/\">\n  //     <img src=\"/assets/images/logo.png\" alt=\"Accion Digital\" />\n  //   </Link>\n  //   <Nav items={config} />\n  // </header>\n);\n\nexport default Header;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Routes from './Routes';\nimport Header from './components/common/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n  <Router>\n    <Header />\n    <Routes />\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}